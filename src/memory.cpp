#include "memory.h"
#include <cstring>
#include <stdexcept>
#include <iostream>

const uint8_t fontSet[80] = {
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};

Memory::Memory() {
    // Initialize our memory array to an empty array!
    _mem.fill(0);
    // Load the font set
    loadFontSet();

}

uint8_t Memory::read(uint16_t address) const {
    if (address >= SIZE) throw std::out_of_range("Memory read out of bounds");
    return _mem[address];
}

void Memory::write(uint16_t address, uint8_t value) {
    if (address >= SIZE) throw std::out_of_range("Memory write out of bounds");

    _mem[address] = value;
}

void Memory::LoadROM(const uint8_t* data, size_t size) {
    if (size > (SIZE - 0x200)) throw std::runtime_error("ROM too large");
    std::memcpy(&_mem[0x200], data, size);
}

void Memory::loadFontSet() {
    std::memcpy(&_mem[0x050], fontSet, sizeof(fontSet));
}   